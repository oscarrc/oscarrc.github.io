{"version":3,"file":"static/js/697.db3820d4.chunk.js","mappings":"4MAGMA,EAAO,yCAAG,WAAOC,EAAaC,EAAKC,GAAzB,yFACNC,EAAO,CACT,CAAEC,KAAK,4CACP,CAAEA,KAAK,0BACP,CAAEA,KAAK,wDACP,CAAEA,MAAM,yCAAO,mCAAP,2BAGNC,EAAW,CACb,CAAED,KAAK,WAAD,OAAaH,EAAG,UAAMA,EAAN,KAAe,IAA/B,OAAoCC,EAAQ,GAA5C,qBACN,CAAEE,MAAM,yCAAO,+BAAP,qDAGNE,EAbM,yCAaM,WAAOC,EAAMC,GAAb,4FACKR,EAAYS,WAAW,CAACF,EAAMC,IAAW,kBAAME,EAAAA,EAAAA,IAAQC,EAAAA,EAAOC,KAAMD,EAAAA,EAAOE,KAArB,aAAiCN,GAAQC,EAAtD,IAD9C,WACRM,EADQ,UAEFA,EAAKC,SAAS,OAFZ,yCAE2BV,GAF3B,gCAGPS,EAAKE,MAAM,MAAMC,KAAI,SAAAC,GAAC,MAAK,CAAEd,KAAMc,EAAb,KAHf,2CAbN,wDAmBRhB,EAAQiB,OAnBA,yCAmBe,CAAC,CAAEf,KAAM,2BAnBxB,UAoBU,IAAnBF,EAAQiB,QAA+B,OAAfjB,EAAQ,GApBvB,yCAoB2CC,GApB3C,UAsBU,IAAnBD,EAAQiB,QAAkC,MAAlBjB,EAAQ,GAAG,GAtB1B,oBAuBFkB,EAAMlB,EAAQ,GAAGc,MAAM,KACvBT,EAAsB,IAAfa,EAAID,OAAeC,EAAI,GAAKnB,EACnCO,EAA2B,IAAhBY,EAAID,OAAgBC,EAAI,GAAKA,EAAI,GAChC,IAAfA,EAAID,QAAiBlB,EA1BhB,0CA0B4B,CAAC,CAAEG,KAAM,yBA1BrC,yBA2BUE,EAAUC,EAAMC,GA3B1B,sDA8BTN,EAAQiB,OAAS,GA9BR,6DAgCCjB,EAAQiB,OAAS,GAAoB,OAAfjB,EAAQ,KAAgB,CAAC,CAAEE,KAAK,wBAAD,OAA0BF,EAAQmB,KAAK,MAAQC,QAAS,gBAC/GnB,IAjCC,4CAAH,0DAsCb,W","sources":["components/terminal/cat.js"],"sourcesContent":["import config from \"../../config/github\";\r\nimport { getFile } from \"../../lib/github\";\r\n\r\nconst project = async (queryClient, dir, options) => {\r\n    const help = [\r\n        { text: `Shows the content of the specified file.`},\r\n        { text: `Usage: cat <file path>`},\r\n        { text: `Use 'ls' to get a list of available files and paths.`},       \r\n        { text: <>Use '<em>cat -h</em>' to show this help</> }\r\n    ];\r\n\r\n    const notFound = [\r\n        { text: `File on ${dir ? `${dir}/` : ''}${options[0]} does not exist.`},\r\n        { text: <>Use '<em>ls</em>' to get a list of available files and paths.</>}\r\n    ]\r\n    \r\n    const parseFile = async (path, filename) => {\r\n        const file = await queryClient.fetchQuery([path, filename], () => getFile(config.user, config.repo, `gh-${path}`, filename));\r\n        if(!file || file.includes(\"404\")) return notFound;\r\n        return file.split(\"\\n\").map(l => ({ text: l }))\r\n    }\r\n\r\n    if(!options.length) return [{ text: \"No file was specified\"}]\r\n    if(options.length === 1 && options[0] === \"-h\") return help;\r\n\r\n    if(options.length === 1 && options[0][0] !== \"-\"){\r\n        const opt = options[0].split(\"/\");\r\n        const path = opt.length === 2 ? opt[0] : dir;\r\n        const filename = opt.length ===  2 ? opt[1] : opt[0];\r\n        if(opt.length !== 2 && !dir) return [{ text: \"No such file exists\"}]\r\n        else return await parseFile(path, filename);\r\n    }\r\n\r\n    if(options.length > 1){\r\n        return [\r\n            ...((options.length > 1 || options[0] !== \"-h\") && [{ text: `Unrecoginized option ${options.join(\" \")}`, classes: \"text-error\" }]),\r\n            ...help\r\n        ];\r\n    }\r\n}\r\n\r\nexport default project;"],"names":["project","queryClient","dir","options","help","text","notFound","parseFile","path","filename","fetchQuery","getFile","config","user","repo","file","includes","split","map","l","length","opt","join","classes"],"sourceRoot":""}